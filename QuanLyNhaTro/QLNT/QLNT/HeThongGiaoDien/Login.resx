<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAB0jv8BOn1XkMZFH1gAAAAASUVORK5CYII=
</value>
  </data>
</root>